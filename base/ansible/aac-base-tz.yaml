---
# version: 1.0.6

- hosts: localhost
  gather_facts: true
  become_user: root
  tasks:
     - name: install system updates for redhat systems
       become: yes
       yum: name=* state=latest update_cache=yes
       when: ansible_os_family == "RedHat"

     - name: install system updates for ubuntu systems
       become: yes
       apt: upgrade=dist update_cache=yes
       when: ansible_os_family == "Debian"

     - name: install the latest ntp and other required dependencies for RHEL < 8
       become: yes
       package:
         name:
           - ntp
           - git
           - python2-pip
         state: latest
       when: ansible_os_family == "RedHat" and ansible_distribution_major_version is version("8",'<')

     - name: install the latest ntp and other required dependencies for RHEL >= 8
       become: yes
       package:
         name:
           - chrony
           - git
           - python2-pip
         state: latest
       when: ansible_os_family == "RedHat" and ansible_distribution_major_version is version("7",'>')

     - name: install the other required dependencies Ubuntu
       become: yes
       package:
         name: 
           - ntp
           - git
           - python-pip
         state: latest
       when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("20",'<')) or
             (ansible_distribution == "Debian" and ansible_distribution_major_version is version("10",'<'))

     - name: install the other required dependencies Debian
       become: yes
       package:
         name: 
           - chrony
           - git
           - python3-pip
         state: latest
       when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("19",'>')) or
             (ansible_distribution == "Debian" and ansible_distribution_major_version is version("9",'>'))

     - name: Upgrade PIP
       become: yes
       pip:
         name: pip
         state: latest
       when: ansible_distribution != "MacOSX"

     - name: Install pexpect
       become: yes
       pip:
         name: pexpect
       when: ansible_distribution != "MacOSX"

     - name: Install pexpect MacOSX
       pip:
         name: 
           - pexpect
           - rpm
       when: ansible_distribution == "MacOSX"

     - name: Package Facts
       package_facts:
         manager: "auto"
       when: ansible_distribution != "MacOSX"

     - name: Package Facts MacOSX
       package_facts:
         manager: "rpm"
       when: ansible_distribution == "MacOSX"

     - name: Homebrew fact MacOSX
       stat:
         path: "/usr/local/bin/brew"
       register: brew_result

     - name: Install Homebrew for MacOSX
       shell: 'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
       when: ansible_distribution == "MacOSX" and not brew_result.stat.exists

     - name: MacOSX PATH
       become: no
       shell: "grep PATH $HOME/.zshrc 2>/dev/null| sed 's/export //'|sed 's/PATH=//' | sed 's/$PATH://g'|tr '\n' ':' | sed 's/:$//'"
       args:
         executable: /bin/bash
       register: path_local
       when: ansible_distribution == "MacOSX"

     - name: Set MacOSX Facts
       set_fact:
         path_one: "{{path_local.stdout.split(':')}}"
         path_two: 
           - "{{ansible_user_dir}}/Library/Python/2.7/bin"
           - "{{ansible_user_dir}}/bin"
       when: ansible_distribution == "MacOSX"

     - name: Merge the Paths
       set_fact:
         mypath: "{{(path_one + path_two)|unique}}"
       when: ansible_distribution == "MacOSX"

     - name: Update .zshrc
       lineinfile:
         path: "{{ansible_user_dir}}/.zshrc"
         regexp: 'PATH='
         line: "export PATH=$PATH{{mypath|join(':')}}"
         create: yes
       when: ansible_distribution == "MacOSX"

     - name: Update .bash_profile
       lineinfile:
         path: "{{ansible_user_dir}}/.bash_profile"
         regexp: 'PATH='
         line: "export PATH=$PATH{{mypath|join(':')}}"
         create: yes
       when: ansible_distribution == "MacOSX"

     - name: Set Facts
       set_fact:
         set_time: ntp
       when: ((ansible_os_family == "Debian") or (ansible_os_family == "VMware Photon OS"))

     - name: Set Facts
       set_fact:
         set_time: ntpd
       when: ansible_os_family == "RedHat"

     - name: Set Facts
       set_fact:
         set_time: chronyd
       when: '"chrony" in ansible_facts.packages'

     - name: Stop Time Daemon
       become: yes
       service:
         name: "{{set_time}}"
         state: stopped
       when: aac_base_tz is defined and ansible_distribution != "MacOSX"

     - name: Set timezone
       become: yes
       timezone:
         name: "{{ item }}"
         with_items:
           - "{{ aac_base_tz }}"
       when: aac_base_tz is defined and ansible_distribution != "MacOSX"

     - name: Enable Time Daemon
       become: yes
       service:
         name: "{{set_time}}"
         enabled: yes
       when: ansible_distribution != "MacOSX" and "microsoft" not in ansible_kernel

     - name: Stop postfix
       become: yes
       service:
         name: postfix
         state: stopped
       when: '"postfix" in ansible_facts.packages'
