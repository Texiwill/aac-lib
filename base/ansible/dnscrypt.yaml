---
# version: 1.0.0

- hosts: localhost
  gather_facts: true
  become_user: root

- name: TZ
  import_playbook: aac-base-tz.yaml

- name: SELinux
  import_playbook: aac-base-selinux.yaml

- hosts: localhost
  tasks:
     - name: install the latest version of dnscrypt dependencies for RedHat
       become: yes
       package:
         name:
           - dnsmasq
           - haveged
           - bind-utils
           - lsof
           - libtool-ltdl
           - GeoIP
         state: latest
       when: (ansible_distribution == "RedHat") or
             (ansible_distribution == "CentOS") or
             (ansible_distribution == "Fedora")

     - name: install the latest version of dnscrypt dependencies for Rocky
       become: yes
       package:
         name:
           - dnsmasq
           - haveged
           - bind-utils
           - lsof
           - libtool-ltdl
         state: latest
       when: (ansible_distribution == "Rocky")

     - name: install the latest version of dnscrypt dependencies for Debian
       become: yes
       package:
         name:
           - dnsmasq
           - haveged
           - bind9utils
           - lsof
           - libtdl7
           - geoip-bin
           - geoip-database
       when: (ansible_distribution == "Debian") or 
             (ansible_distribution == "Ubuntu")

     - name: start haveged
       become: yes
       service:
         name: haveged
         state: started

     - name: Check if dnscrypt-proxy exists
       stat:
         path: /opt/dnscrypt-proxy/dnscrypt-proxy.toml
       register: stat_result

     - name: Get Latest version Info for DNS Proxy
       become: no
       shell: 'wget -O - https://api.github.com/repos/DNSCrypt/dnscrypt-proxy/releases/latest |grep linux_x86 |grep browser_download_url|cut -d\" -f 4|head -1'
       args:
         executable: /bin/bash
       register: dnsproxy_output

     - name: Set DNS Proxy location
       set_fact:
         dnsp_latest: "{{dnsproxy_output.stdout}}"
         dnsp_basename: "{{dnsproxy_output.stdout | basename}}"

     - name: Download the latest version of DNS Proxy
       become: no
       get_url:
         url: "{{dnsp_latest}}"
         dest: "/tmp/{{dnsp_basename}}"

     - name: create DNS Proxy Directory
       become: yes
       file:
         path: /opt/dnscrypt-proxy
         state: directory

     - name: unpack DNS Proxy
       become: yes
       unarchive:
         src: "/tmp/{{dnsp_basename}}"
         dest: /opt/dnscrypt-proxy
         extra_opts:
         - --strip-components=1
       
     - name: Download the latest public-resolvers
       become: yes
       get_url:
         url: http://download.dnscrypt.info/resolvers-list/v3/public-resolvers.md
         dest: /opt/dnscrypt-proxy

     - name: dnscypt-proxy.toml create
       become: yes
       copy:
         src: /opt/dnscrypt-proxy/example-dnscrypt-proxy.toml
         dest: /opt/dnscrypt-proxy/dnscrypt-proxy.toml
       when: not stat_result.stat.exists

     - name: update server_names
       become: yes
       lineinfile:
         path: /opt/dnscrypt-proxy/dnscrypt-proxy.toml
         insertbefore: "^# server_names"
         line: "server_names = ['cloudflare', 'cloudflare-ipv6']" 
       when: not stat_result.stat.exists

     - name: update listen_addresses
       become: yes
       lineinfile:
         path: /opt/dnscrypt-proxy/dnscrypt-proxy.toml
         regex: "^listen_addresses"
         line: "listen_addresses = ['0.0.0.0:53']"
       when: not stat_result.stat.exists

     - name: update fallback_resolver
       become: yes
       lineinfile:
         path: /opt/dnscrypt-proxy/dnscrypt-proxy.toml
         regex: "^fallback_resolvers"
         line: "fallback_resolver = '1.0.0.1:53'"
       when: not stat_result.stat.exists

     - name: Create resolv.conf
       become: yes
       blockinfile:
         path: /etc/resolv.conf
         block: |
           # Generated by NetworkManager
           nameserver 127.0.0.1
           options edns0 single-request-reopen
         mode: 0644

     - name: Stop dnsmasq
       become: yes
       service:
         name: dnsmasq
         state: stopped

     - name: Check if dnscrypt-proxy service exists
       stat:
         path: /etc/systemd/system/dnscrypt-proxy.service
       register: srv_result

     - name: Install dnsproxy systemd
       become: yes
       shell: /opt/dnscrypt-proxy/dnscrypt-proxy -service install
       args:
         executable: /bin/bash
       when: not srv_result.stat.exists

     - name: Start dnsproxy
       become: yes
       service:
         name: dnscrypt-proxy
         state: started
         enabled: true

- name: Fix SELinux
  import_playbook: aac-base-fixselinux.yaml
...
